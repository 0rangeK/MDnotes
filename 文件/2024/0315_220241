# 第一章
## 第一节
`timescale 1ns / 1ps

module Kalman_Top(
    input         	    sys_clk_p,       // Differentia system clock 200Mhz input on board
	input         	    sys_clk_n,
	input         	    sys_rst_n,      // 
	
	input           uart_rxd,           //UART
    output          uart_txd            //UART 
    );

//===========================================================================
//?????????????????????sys_clk_p???sys_clk_n??????????????????(sys_clk)
//===========================================================================
wire        sys_clk;                    // 200Mhz ??????
IBUFDS #(
	.DIFF_TERM("TRUE"),             // Differential Termination
	.IBUF_LOW_PWR("TRUE"),          // Low power="TRUE", Highest performance="FALSE" 
	.IOSTANDARD("DEFAULT")          // Specify the input I/O standard
) u_ibuf_sys_clk (
	.O(sys_clk),  // ????????????
	.I(sys_clk_p),  // Diff_p buffer input (connect directly to top-level port)
	.IB(sys_clk_n) // Diff_n buffer input (connect directly to top-level port)
); 

//***************************************************************************
//**main
//***************************************************************************

//parameter define
parameter  CLK_FREQ = 200000000;     
parameter  UART_BPS = 115200;        
    
//wire define   
wire       uart_recv_done;           
wire [7:0] uart_recv_data;           
wire       uart_send_en;             
wire [7:0] uart_send_data;           
wire       uart_tx_busy;             

wire    [63:0]          Zmea;  //????????????????????????
wire    [63:0]          Vts;   //????????????
wire    [63:0]			Qest;  //???????????????

wire [15:0] number;
reg  [15:0] numberr;

wire        Qest_done;
wire        data_done;                //
wire        enable;


//??????????????????         
uart_recv #(
    .CLK_FREQ       (CLK_FREQ),         //????????????????????????
    .UART_BPS       (UART_BPS))         //?????????????????????
u_uart_recv(                 
    .sys_clk        (sys_clk), 
    .sys_rst_n      (sys_rst_n),
    
    .uart_rxd       (uart_rxd),
    .uart_done      (uart_recv_done),
    .uart_data      (uart_recv_data)
    );

//??????????????????  
uart_send #(                          
    .CLK_FREQ       (CLK_FREQ),          //????????????????????????
    .UART_BPS       (UART_BPS))			 //?????????????????????

u_uart_send(                 
    .sys_clk        (sys_clk),
    .sys_rst_n      (sys_rst_n),
     
    .uart_en        (uart_send_en),
    .uart_din       (uart_send_data),
    .uart_tx_busy   (uart_tx_busy),
    .uart_txd       (uart_txd)
    );

//??????????????????    
data_recv u_data_recv(
    .sys_clk        (sys_clk), 
    .sys_rst_n      (sys_rst_n),
    
    .recv_done		(uart_recv_done), 	//?????????????????????
    .recv_data		(uart_recv_data),	//?????????
    
    .data_done		(enable),        //????????????????????????
    .Zmea			(Zmea),        // ?????????????????? sfix64_En64
    .Vts			(Vts)          // ?????????????????? sfix64_En58
    );
 
//?????????????????? 
//data_send u_data_send(
//    .sys_clk        (sys_clk),
//    .sys_rst_n      (sys_rst_n),
//    
//    .Qest			(Qest),       //????????????  sfix64_En14
//    .Qest_done		(data_done),       //????????????
//
//    .send_busy		(uart_tx_busy),     // ?????????-????????? 
//    .send_en		(uart_send_en),     //  ????????????
//    .send_data		(uart_send_data)    //  ?????????
//    );

    data_send2 u_data_send2(
        .sys_clk        (sys_clk),
        .sys_rst_n      (sys_rst_n),

        .Qest			(Qest),       //????????????  sfix64_En14
        .number			(numberr),       //????????????  sfix64_En14
        .Qest_done		(Qest_done),       //????????????

        .send_busy		(uart_tx_busy),     // ?????????-????????? 
        .send_en		(uart_send_en),     //  ????????????
        .send_data		(uart_send_data)    //  ?????????
    );

    //assign Qest_done = enable ;

    //assign Qest = Vts ;

    kalman u_kalman (
        .sys_clk            (   sys_clk     ), 
        .sys_rst_n          (   sys_rst_n   ),
        .enbi               (   enable      ),
        .Zmea               (   Zmea        ),
        .Vts                (   Vts         ),
        .enbo               (   Qest_done   ),
        .Qest               (   Qest        )
    );

//    datas u_datas(  
//        .sys_clk            ( sys_clk   ),        //??????
//        .sys_rst_n          ( sys_rst_n ),      //??????
//        .clk_enable         ( enable    ),     //????????????????????????
//        .Zmea_data          ( Zmea      ),           // ???????????? sfix64_En64
//        .Vts_data           ( Vts       ),            // ???????????? sfix64_En58
//        .number             ( number    )      
//        );
        
    always @(posedge sys_clk or negedge sys_rst_n) begin         
    if (!sys_rst_n) begin
        numberr <= 16'd0;
    end                                                      
    else begin                                               
        if(Qest_done)begin
            numberr <= numberr + 16'd1;
        end
    end
end
endmodule
